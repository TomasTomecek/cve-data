#!/usr/bin/python3
import json
import re
import subprocess
import sys
from pathlib import Path
from typing import List


workspace_path = Path(__file__).parent / "workspace"
projects = [
    "https://github.com/django/django",
    "https://github.com/psf/requests",
    "https://github.com/urllib3/urllib3",
    "https://github.com/pycrypto/pycrypto",
    "https://github.com/pyca/cryptography",
    "https://github.com/pallets/flask",
    "https://github.com/python/cpython",
    "https://github.com/mozillazg/pypy",  # doesnt work: https://foss.heptapod.net/pypy/pypy
    "https://github.com/ansible/ansible",
    "https://github.com/pallets/werkzeug",
    "https://github.com/pallets/jinja",
    "https://github.com/tensorflow/tensorflow",
]
TEST_FILE_RE = re.compile(r".+/test_\w+.py")
CVE_RE = re.compile(r"CVE-\d+-\d+")


def get_cve_commits(git_project: Path) -> List[str]:
    """return a list of commits that probably contain CVE fix:
    string 'CVE' needs to be present in the commit message"""
    s = subprocess.check_output(
        ["git", "log", "--grep=CVE", "--pretty=format:%H"],
        cwd=git_project,
        encoding="utf-8",
    )
    return s.splitlines()


def get_code_changes(git_project: Path, git_hash: str) -> List[str]:
    """return list of patches in .py files"""
    s = subprocess.check_output(
        ["git", "diff", "--name-only", f"{git_hash}^", git_hash],
        cwd=git_project,
        encoding="utf-8",
    )
    return [x for x in s.splitlines() if x.endswith(".py")]


def setup_workspace():
    workspace_path.mkdir(exist_ok=True)
    for p in projects:
        project_name = p.rsplit("/", 1)[1]
        clone_path = workspace_path / project_name
        if clone_path.is_dir():
            continue
        subprocess.check_call(
            ["git", "clone", p, clone_path],
            cwd=workspace_path,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )


def process_project(git_project: Path):
    data = []
    cve_commits = get_cve_commits(git_project)
    for cve_commit in cve_commits:
        code_changes = get_code_changes(git_project, cve_commit)
        # both code and tests
        if code_changes:
            # exclude all tests
            actual_code_changes = [
                x
                for x in code_changes
                if not (
                    x.startswith("test")
                    or x.startswith("doc")
                    or x == "setup.py"
                    or TEST_FILE_RE.match(x)
                )
            ]
            if len(actual_code_changes) != 1:
                # we want simple fixes initially
                continue

            patch = subprocess.check_output(
                [
                    "git",
                    "diff",
                    f"{cve_commit}^",
                    cve_commit,
                    "--",
                    actual_code_changes[0],
                ],
                cwd=git_project,
                encoding="utf-8",
            )
            commit_message = subprocess.check_output(
                ["git", "log", "--format=%B", "-n", "1", cve_commit],
                cwd=git_project,
                encoding="utf-8",
            )
            code_before = subprocess.check_output(
                ["git", "show", f"{cve_commit}^:{actual_code_changes[0]}"],
                cwd=git_project,
                encoding="utf-8",
            )
            code_after = subprocess.check_output(
                ["git", "show", f"{cve_commit}:{actual_code_changes[0]}"],
                cwd=git_project,
                encoding="utf-8",
            )
            possible_cve_ids = CVE_RE.findall(commit_message)
            # pick the first one
            cve_id = possible_cve_ids[0] if possible_cve_ids else ""

            # # one can verify that the patch and code_before/after are valid:
            # import difflib
            # d = difflib.unified_diff(code_before.splitlines(), code_after.splitlines())
            # print('\n'.join(list(d)))
            # print(patch)

            data.append(
                {
                    "cve_id": cve_id,
                    # it's possible multiple commits fix a CVE
                    "upstream_patch": patch,
                    "upstream_commit_hash": cve_commit,
                    "upstream_commit_message": commit_message,
                    "upstream_code_before": code_before,
                    "upstream_code_after": code_after,
                    "upstream_project": git_project.name,
                    "downstream_patch": "TBD",
                }
            )
            # print(f"{cve_id} {git_project.name} {actual_code_changes}")
    return data


def main() -> int:
    setup_workspace()

    data = []

    for p in projects:
        project_name = p.rsplit("/", 1)[1]
        clone_path = workspace_path / project_name
        data += process_project(clone_path)

    # print(f"SUM: {len(data)}")

    print(json.dumps(data, indent=2))
    return 0


if __name__ == "__main__":
    sys.exit(main())
