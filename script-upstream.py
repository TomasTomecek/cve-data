#!/usr/bin/python3
import json
import subprocess
import sys
from typing import List


def get_cve_commits(git_project: str) -> List[str]:
    """ return a list of commits that probably contain CVE fix: string 'CVE' needs to be present in the commit message """
    s = subprocess.check_output(["git", "log", "--grep=CVE", "--pretty=format:%H"], cwd=git_project, encoding="utf-8")
    return s.splitlines()


def get_code_changes(git_project: str, git_hash: str) -> List[str]:
    """ return list of patches in .py files """
    s = subprocess.check_output(["git", "diff", "--name-only", f"{git_hash}^", git_hash], cwd=git_project, encoding="utf-8")
    return [x for x in s.splitlines() if x.endswith(".py")]


def main() -> int:
    try:
        git_project, source_filter = sys.argv[1:]
    except ValueError:
        print(f"usage: {sys.argv[0]} GIT_REPO_PATH SOURCE_FILTER\n")
        print("GIT_REPO_PATH is a path to a locally cloned python project that\n"
              "  should contain at least a single CVE fix")
        print("SOURCE_FILTER is a string that is used for filtering changes in a commit.\n"
              "  Right now we are interested in fixes that only change a single code file\n"
              "  matching the SOURCE_FILTER. Example: for django project this should be set to django/")
        return 2
    cve_commits = get_cve_commits(git_project)
    data = []
    for cve_commit in cve_commits:
        code_changes = get_code_changes(git_project, cve_commit)
        # both code and tests
        if code_changes:
            actual_code_changes = [x for x in code_changes if x.startswith(source_filter)]
            if len(actual_code_changes) != 1:
                # we want simple fixes initially
                continue

            patch = subprocess.check_output(["git", "diff", f"{cve_commit}^", cve_commit, "--", actual_code_changes[0]], cwd=git_project, encoding="utf-8")
            commit_message = subprocess.check_output(["git", "log", "--format=%B", "-n", "1", cve_commit], cwd=git_project, encoding="utf-8")
            code_before = subprocess.check_output(["git", "show", f"{cve_commit}^:{actual_code_changes[0]}"], cwd=git_project, encoding="utf-8")
            code_after = subprocess.check_output(["git", "show", f"{cve_commit}:{actual_code_changes[0]}"], cwd=git_project, encoding="utf-8")

            # # one can verify that the patch and code_before/after are valid:
            # import difflib
            # d = difflib.unified_diff(code_before.splitlines(), code_after.splitlines())
            # print('\n'.join(list(d)))
            # print(patch)

            data.append({
                "patch": patch,
                "commit_message": commit_message,
                "code_before": code_before,
                "code_after": code_after,
            })
    print(json.dumps(data, indent=2))
    return 0


if __name__ == '__main__':
    sys.exit(main())
